generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FrontendUrl {
  id        String   @id @default(uuid())
  url       String   @unique
  label     String   @default("---")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentType {
  IDENTITY_DOCUMENT // Documento de Identificação (BI, passaporte, etc.)
  CRIMINAL_RECORD // Registo Criminal
  TRAINING_CERTIFICATE // Certificado de Formação
  MEDICAL_CERTIFICATE // Atestado Médico
  PHOTO // Foto de Perfil
  OTHER // Outro
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum UserType {
  INDIVIDUAL // Para pessoas físicas
  CORPORATE // Para empresas
}

enum JobApplicationStatus {
  PENDING
  IN_REVIEW
  INTERVIEW
  ACCEPTED
  REJECTED
}

model JobApplication {
  id                     String               @id @default(uuid())
  locationId             String
  fullName               String
  identityNumber         String
  phoneNumber            String
  optionalPhoneNumber    String?
  desiredPositionId      String
  email                  String
  birthDate              String
  genderId               String
  highestDegreeId        String
  maritalStatusId        String?
  experienceLevelId      String?

  hasChildren            Boolean
  knownDiseases           Boolean  @default(false)
  availabilityDate       String
  ProfessionalExperience Experience[]
  desiredPosition        DesiredPosition      @relation(fields: [desiredPositionId], references: [id])
  gender                 Gender               @relation(fields: [genderId], references: [id])
  location               Location             @relation(fields: [locationId], references: [id])
  status                 JobApplicationStatus @default(PENDING)
  highestDegree          HighestDegree        @relation(fields: [highestDegreeId], references: [id])
  maritalStatus          MaritalStatus?       @relation(fields: [maritalStatusId], references: [id])
  experienceLevel        ExperienceLevel?     @relation(fields: [experienceLevelId], references: [id])

  // Relacionamentos Many-to-Many nativos
  languages              Language[]
  skills                 Skill[]
  courses                Course[]
  professional           Professional[]
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

model Professional {
  id                     String                  @id @default(uuid())
  fullName               String
  email                  String                  @unique
  phoneNumber            String
  identityNumber         String?
  isAvailable            Boolean                 @default(false)
  description            String?
  expectedAvailability   DateTime?
  hasCriminalRecord      Boolean                 @default(false)
  hasMedicalCertificate  Boolean                 @default(false)
  hasTrainingCertificate Boolean                 @default(false)
  locationId             String
  profileImage           String?
  genderId               String
  birthDate              DateTime                @default(now())
  hasChildren            Boolean                 @default(false)
 knownDiseases           Boolean  @default(false)
  expectedSalary         Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  jobApplicationId       String?                 @unique
  desiredPositionId      String
  experienceLevelId      String
  // Relações
  desiredPosition        DesiredPosition         @relation(fields: [desiredPositionId], references: [id])
  gender                 Gender                  @relation(fields: [genderId], references: [id])
  jobApplication         JobApplication?         @relation(fields: [jobApplicationId], references: [id])
  location               Location                @relation(fields: [locationId], references: [id])
  experienceLevel        ExperienceLevel         @relation(fields: [experienceLevelId], references: [id])
  availability           Availability[]
  Document               Document[]
  ProfessionalExperience Experience[]
  professionalCourses    ProfessionalCourses[]
  professionalLanguages  ProfessionalLanguages[]
  professionalSkills     ProfessionalSkills[]
  maritalStatus          MaritalStatus?          @relation(fields: [maritalStatusId], references: [id])
  maritalStatusId        String?
  highestDegree          HighestDegree?          @relation(fields: [highestDegreeId], references: [id])
  highestDegreeId        String?

  contract                    Contract[]
  contractPackegeProfissional ContractPackegeProfissional[]

  ServiceRequest ServiceRequest[]
}

model GeneralAvailability {
  id             String           @id @default(uuid())
  name           String           @unique
  label          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model ExperienceLevel {
  id            String         @id @default(uuid())
  name          String         @unique
  label         String
  professionals Professional[]

  JobApplication JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model Gender {
  id            String         @id @default(uuid())
  name          String         @unique // Ex: MALE
  label         String
  professionals Professional[]
  AdminUser     AdminUser[]

  jobApplication JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model MaritalStatus {
  id            String         @id @default(uuid())
  name          String         @unique // Ex: SINGLE
  label         String // Ex: "Solteiro"
  professionals Professional[]

  JobApplication JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model HighestDegree {
  id            String         @id @default(uuid())
  name          String         @unique // Ex: BACHELOR
  label         String // Ex: "Graduação"
  level         Int // Para ordenação (1, 2, 3...)
  professionals Professional[]

  JobApplication JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model DesiredPosition {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  label         String?
  professionals Professional[]

  JobApplication JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt

  contract Contract[]
}

// ----------------------------------------------------
// Tabela de Junção para Cursos
// ----------------------------------------------------
model Course {
  id                  String                @id @default(uuid())
  name                String                @unique // Ex: "Primeiros Socorros"
  label               String?
  // Relacionamento inverso com a tabela de junção
  professionalCourses ProfessionalCourses[]
  JobApplication      JobApplication[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
}

//A tabela intermediária que une o Professional com o Course
model ProfessionalCourses {
  professionalId String
  courseId       String
  professional   Professional @relation(fields: [professionalId], references: [id])
  course         Course       @relation(fields: [courseId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@id([professionalId, courseId])
}

// ----------------------------------------------------
// Tabela de Junção para Idiomas
// ----------------------------------------------------
model Language {
  id    String  @id @default(uuid())
  name  String  @unique // Ex: "Português"
  label String?

  // Relacionamento inverso com a tabela de junção
  professionalLanguages ProfessionalLanguages[]

  JobApplication JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

// A tabela intermediária que une o Professional com o Language
model ProfessionalLanguages {
  professionalId String
  languageId     String
  level          String? // Campo extra para adicionar nível (ex: 'Fluente', 'Intermediário')
  professional   Professional @relation(fields: [professionalId], references: [id])
  language       Language     @relation(fields: [languageId], references: [id])

  @@id([professionalId, languageId])
}

// ----------------------------------------------------
// Tabela de Junção para Habilidades
// ----------------------------------------------------
model Skill {
  id                 String               @id @default(uuid())
  name               String               @unique
  label              String?
  // Relacionamento inverso com a tabela de junção
  professionalSkills ProfessionalSkills[]

  JobApplication JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

// A tabela intermediária que une o Professional com a Skill
model ProfessionalSkills {
  professionalId String
  skillId        String

  professional Professional @relation(fields: [professionalId], references: [id])
  skill        Skill        @relation(fields: [skillId], references: [id])

  @@id([professionalId, skillId])
}

model Experience {
  id             String           @id @default(uuid())
  localTrabalho  String
  cargo          String
  tempo          String
  description    String?          @default("---")
  startDate      String?          @default("---")
  endDate        String?          @default("---")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  jobApplication JobApplication[]
  Professional   Professional[]
}

model Document {
  id             String       @id @default(uuid()) // ID único do documento
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String // ID do profissional vinculado
  type           DocumentType // Tipo do documento (ex: BI, certificado, etc.)
  url            String // URL do arquivo/documento
  createdAt      DateTime     @default(now()) // Data de criação
  updatedAt      DateTime     @updatedAt // Data da última atualização
}

model Availability {
  id             String       @id @default(uuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  weekday        Weekday // ← agora usa enum
  startTime      String // e.g., "08:00"
  endTime        String // e.g., "17:00"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Location {
  id             String           @id @default(uuid())
  city           City             @relation(fields: [cityId], references: [id])
  cityId         String
  district       District         @relation(fields: [districtId], references: [id])
  districtId     String
  street         String?
  lat            Float?
  lng            Float?
  professionals  Professional[]
  jobApplication JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contract       Contract[]
}

model country {
  id          String   @id @default(uuid())
  name        String   @unique
  label       String
  isAvailable Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model City {
  id          String     @id @default(uuid())
  name        String     @unique
  districts   District[]
  locations   Location[]
  isAvailable Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
}

model District {
  id                   String                 @id @default(uuid())
  name                 String
  city                 City                   @relation(fields: [cityId], references: [id])
  cityId               String
  locations            Location[]
  isAvailable          Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  ClientCompanyProfile ClientCompanyProfile[]

  @@unique([name, cityId])
}

enum StatusRequest {
  PENDING
  IN_REVIEW
  PLAN_OFFERED
  CONTRACT_GENERATED
  COMPLETED
  REJECTED
}

enum ServiceFrequency {
  DAILY // Diária
  SEMIANNUALLY // Semestral
  ANNUALLY // Anual
}

model ServiceRequest {
  id                   String   @id @default(uuid())
  // Requester Information (Captured from a Single Form)
  requesterType        UserType // "PESSOA_NORMAL" ou "EMPRESA"
  requesterEmail       String // E-mail de contacto
  requesterPhoneNumber String?

  // Specific Data for an Individual
  individualRequesterName  String? // Nome da pessoa
  individualIdentityNumber String? // Número de identificação
  individualAddress        String? // Morada da pessoa
  individualUserId         String? // Id Do Utlizador

  // Specific Data for a Company
  companyRequesterName String? // Nome da empresa
  companyNif           String? // NIF da empresa
  companyAddress       String? // Morada da empresa
  companyDistrictId    String? // Distrito da empresa
  companySectorId      String? // Setor da empresa

  // Request Details
  description      String // Descrição da solicitação
  serviceFrequency ServiceFrequency?
  createdAt        DateTime         @default(now())
  status           StatusRequest    @default(PENDING) // Estado da solicitação

  // Fields for the Service (only one is populated)
  planId         String? // ID do plano (para empresas)
  professionalId String? // ID do profissional (para pessoas normais)
  professional   Professional? @relation(fields: [professionalId], references: [id])
  package           Package?      @relation(fields: [planId], references: [id])

  // Optional relations to client profiles (filled after registration)
  individualClientId String? // ID do cliente individual, após registo
  individualClient   ClientProfile? @relation(fields: [individualClientId], references: [id])

  companyClientId String? // ID da empresa, após registo
  companyClient   ClientCompanyProfile? @relation(fields: [companyClientId], references: [id])
}

model ClientProfile {
  id               String           @id @default(uuid())
  fullName         String
  email            String           @unique
  identityNumber   String
  phoneNumber      String
  optionalContacts String[]
  address          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String           @unique
  ServiceRequest   ServiceRequest[]

  contract Contract[]
}

// Informação da Residencia !
//Informação do Contrato terá  id residencia, id cliente perfil, id profissional !
// Assim, podemos vincular um cliente a uma residência e um profissional a uma residência
// E também vincular um cliente a um profissional, e um profissional a uma residência
// Com isso sera possivelfirmar uma contratação e saber que esta vinculado !
model ClientCompanyProfile {
  id              String   @id @default(uuid())
  companyName     String
  nif             String
  email           String   @unique
  phoneNumber     String
  optionalContact String?
  address         String
  district        District @relation(fields: [districtId], references: [id])
  districtId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActive        Boolean  @default(true)
  sectorId        String
  sector          Sector   @relation(fields: [sectorId], references: [id])

  ServiceRequest ServiceRequest[]

  contract Contract[]
}

// Tabela de Pacotes
model Package {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  employees   Int
  price       Float      @default(0.0)
  isPopular   Boolean    @default(false)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // Campo para armazenar as informações adicionais como um array de objetos
  details     Json?
  contract    Contract[]

  ServiceRequest ServiceRequest[]
}

// Tabela para os Métodos de Pagamento
model PaymentMethod {
  id        String    @id @default(uuid())
  name      String    @unique // Ex: "TransferenciaBancaria", "CartaoCredito", etc.
  label     String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURE
  ACTIVE
  PAUSED
  COMPLETED
  TERMINATED
  EXPIRED
  CANCELED
}

model Contract {
  id                 String                @id @default(uuid())
  contractNumber     String                @unique @default(uuid())
  title              String?
  // Relacionamento com as Partes
  professional       Professional?         @relation(fields: [professionalId], references: [id])
  professionalId     String? // Agora é OPCIONAL
  clientType         UserType
  individualClientId String?
  companyClientId    String?
  individualClient   ClientProfile?        @relation(fields: [individualClientId], references: [id])
  companyClient      ClientCompanyProfile? @relation(fields: [companyClientId], references: [id])
  // NOVOS CAMPOS DO PLANO MOVIDOS PARA CÁ
  packageId          String? // ID do plano
  package            Package?              @relation(fields: [packageId], references: [id])
  // Detalhes do Serviço
  desiredPosition    DesiredPosition?      @relation(fields: [desiredPositionId], references: [id])
  desiredPositionId  String?
  description        String
  serviceFrequency   ServiceFrequency? 
  // Informações de Localização
  location           Location              @relation(fields: [locationId], references: [id])
  locationId         String
  //Termos Financeiros
  agreedValue        Float
  discountPercentage Float                 @default(0.0)
  finalValue         Float
  paymentTerms       String?               @db.Text
  // Cronograma
  startDate          DateTime
  endDate            DateTime?
  // Status e Autoria
  status             ContractStatus        @default(DRAFT)
  notes              String?               @db.Text
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  contractPayment    ContractPayment[]

  contractPackegeProfissional ContractPackegeProfissional[]
}
model contractSequence {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}


model ContractPackegeProfissional {
  id             String       @id @default(uuid())
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
   contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId     String
  isActive       Boolean      @default(true)
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
  REFUNDED
}

model ContractPayment {
  id String @id @default(uuid())

  // Relacionamentos
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id])
  paymentId  String
  payment    Payment  @relation(fields: [paymentId], references: [id])

  // Detalhes do Pagamento
  amountPaid  Float // O valor efetivamente pago nesta transação
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime // Data em que o pagamento foi registrado
  notes       String?       @db.Text

  // Datas de controle
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id              String        @id @default(uuid())
  name            String
  label           String
  description     String
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  contractPayment ContractPayment[]
}

model Sector {
  id        String                 @id @default(uuid())
  name      String                 @unique
  label     String
  companies ClientCompanyProfile[]
  createdAt DateTime               @default(now())
  updatedAt DateTime               @default(now()) @updatedAt
}

model User {
  id            String          @id @default(uuid())
  firstName     String
  lastName      String
  email         String          @unique
  //nif            String?      @unique
  password      String
  isActive      Boolean         @default(true)
  type          UserType        @default(INDIVIDUAL)
  avatar        String          @default("user.png")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  clientProfile ClientProfile[]
}

model AdminUser {
  id                   String                 @id @default(uuid())
  name                 String
  numberphone          String
  isActive             Boolean                @default(true)
  identityNumber       String                 @unique
  gender               Gender?                @relation(fields: [genderId], references: [id])
  birthDate            DateTime
  email                String                 @unique
  password             String
  avatar               String?          @default("user.png")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  notificationSettings NotificationSettings[]
  securitySettings     SecuritySettings[]
  genderId             String?
  profile              Profile                @relation(fields: [profileId], references: [id])
  profileId            String 
  address              String                 @default("---")
  isRoot               Boolean                @default(false)
}

// Novo modelo Profile para gerir perfis de utilizador.
// Este modelo armazena as permissões e é associado a um AdminUser.
model Profile {
  id          String       @id @default(uuid())
  name        String       @unique
  label       String
  description String?
  adminUser   AdminUser[] // Agora um array, pois pode ter vários usuários
  permissions Permission[] @relation("ProfilePermissions")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// O model Permission agora tem uma relação many-to-many com o novo modelo Profile.
model Permission {
  id       String    @id @default(uuid())
  name     String    @unique
  label    String    @default("---")
  profiles Profile[] @relation("ProfilePermissions")
}

model SecuritySettings {
  id                 String    @id @default(uuid())
  userId             String    @unique
  loginNotifications Boolean   @default(true)
  lastPasswordChange DateTime?
  adminUser          AdminUser @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id        String    @id @default(uuid())
  userId    String    @unique
  email     Boolean   @default(true)
  push      Boolean   @default(false)
  marketing Boolean   @default(true)
  weekly    Boolean   @default(true)
  adminUser AdminUser @relation(fields: [userId], references: [id])
}

model NewsletterSubscriber {
  id        String    @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}
